// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: prefer_single_quotes, public_member_api_docs, lines_longer_than_80_chars, implicit_dynamic_list_literal, implicit_dynamic_map_literal

import 'package:mason/mason.dart';

final atThemeFlutterBundle = MasonBundle.fromJson(<String, dynamic>{
  "files": [
    {
      "path": "lib/main.dart",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "lib/src/pages/profile_page.dart",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "lib/src/utils/color_constants.dart",
      "data":
          "aW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7CgpjbGFzcyBDb2xvckNvbnN0YW50cyB7CiAgQ29sb3JDb25zdGFudHMuXygpOwoKICBzdGF0aWMgY29uc3QgQ29sb3IgcHJpbWFyeURlZmF1bHQgPSBDb2xvcigweEZGNTg0MTlDKTsKCiAgc3RhdGljIGNvbnN0IENvbG9yIGJhY2tncm91bmRMaWdodCA9IENvbG9ycy53aGl0ZTsKICBzdGF0aWMgY29uc3QgQ29sb3IgYmFja2dyb3VuZERhcmsgPSBDb2xvcigweEZGMzMzMzMzKTsKICBzdGF0aWMgY29uc3QgQ29sb3Igc2Vjb25kYXJ5ID0gQ29sb3IoMHhGRkYyNjIzRSk7CgogIHN0YXRpYyBjb25zdCBMaXN0PENvbG9yPiBwcmltYXJ5Q29sb3JzID0gWwogICAgQ29sb3IoMHhGRjU4NDE5QyksCiAgICBDb2xvcigweEZGNkVCQ0I3KSwKICAgIENvbG9yKDB4RkYwNDU1QkYpLAogICAgQ29sb3IoMHhGRkZFMTA5NCksCiAgICBDb2xvcigweEZGQTc3RDYwKSwKICAgIENvbG9yKDB4RkZFRjU3NDMpLAogICAgQ29sb3IoMHhGRjdDQ0IxMiksCiAgICBDb2xvcigweEZGRkZCRTIxKSwKICBdOwp9Cg==",
      "type": "text"
    },
    {
      "path": "lib/src/utils/text_styles.dart",
      "data":
          "aW1wb3J0ICdwYWNrYWdlOmF0X2NvbW1vbl9mbHV0dGVyL3NlcnZpY2VzL3NpemVfY29uZmlnLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9tYXRlcmlhbC5kYXJ0JzsKCmNsYXNzIFRleHRTdHlsZXMgewogIFRleHRTdHlsZXMuXygpOwoKICBzdGF0aWMgdmFyIHRleHQxNSA9IFRleHRTdHlsZShmb250U2l6ZTogMTUudG9Gb250KTsKfQo=",
      "type": "text"
    }
  ],
  "hooks": [],
  "name": "at_theme_flutter",
  "description": "A sample of how to use the at_theme_flutter package.",
  "version": "0.1.0",
  "environment": {"mason": "any"},
  "vars": {}
});
