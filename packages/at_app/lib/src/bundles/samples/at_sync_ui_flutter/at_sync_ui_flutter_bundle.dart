// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: prefer_single_quotes, public_member_api_docs, lines_longer_than_80_chars, implicit_dynamic_list_literal, implicit_dynamic_map_literal

import 'package:mason/mason.dart';

final atSyncUiFlutterBundle = MasonBundle.fromJson(<String, dynamic>{
  "files": [
    {
      "path": "lib/home_screen.dart",
      "data":
          "aW1wb3J0ICdwYWNrYWdlOmF0X3N5bmNfdWlfZmx1dHRlci9hdF9zeW5jX3VpLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6YXRfc3luY191aV9mbHV0dGVyL2F0X3N5bmNfdWlfZmx1dHRlci5kYXJ0JzsKaW1wb3J0ICd1aV9vcHRpb25zLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9tYXRlcmlhbC5kYXJ0JzsKaW1wb3J0ICdtYWluLmRhcnQnOwoKY2xhc3MgSG9tZVNjcmVlbiBleHRlbmRzIFN0YXRlZnVsV2lkZ2V0IHsKICBmaW5hbCBTdHJpbmcgYWN0aXZlQXRTaWduOwogIGNvbnN0IEhvbWVTY3JlZW4oe3JlcXVpcmVkIHRoaXMuYWN0aXZlQXRTaWduLCBLZXk/IGtleX0pIDogc3VwZXIoa2V5OiBrZXkpOwoKICBAb3ZlcnJpZGUKICBfSG9tZVNjcmVlblN0YXRlIGNyZWF0ZVN0YXRlKCkgPT4gX0hvbWVTY3JlZW5TdGF0ZSgpOwp9CgpjbGFzcyBfSG9tZVNjcmVlblN0YXRlIGV4dGVuZHMgU3RhdGU8SG9tZVNjcmVlbj4gewogIGxhdGUgU3RyaW5nIGFjdGl2ZUF0U2lnbjsKCiAgQG92ZXJyaWRlCiAgdm9pZCBpbml0U3RhdGUoKSB7CiAgICB0cnkgewogICAgICBzdXBlci5pbml0U3RhdGUoKTsKICAgICAgYWN0aXZlQXRTaWduID0gd2lkZ2V0LmFjdGl2ZUF0U2lnbjsKICAgICAgQXRTeW5jVUlTZXJ2aWNlKCkuaW5pdCgKICAgICAgICBhcHBOYXZpZ2F0b3I6IE5hdlNlcnZpY2UubmF2S2V5LAogICAgICAgIG9uU3VjY2Vzc0NhbGxiYWNrOiBfb25TdWNjZXNzQ2FsbGJhY2ssCiAgICAgICAgb25FcnJvckNhbGxiYWNrOiBfb25FcnJvckNhbGxiYWNrLAogICAgICApOwogICAgfSBjYXRjaCAoZSkgewogICAgICBXaWRnZXRzQmluZGluZy5pbnN0YW5jZS5hZGRQb3N0RnJhbWVDYWxsYmFjaygodGltZVN0YW1wKSB7CiAgICAgICAgc2hvd0RpYWxvZygKICAgICAgICAgIGNvbnRleHQ6IGNvbnRleHQsCiAgICAgICAgICBiYXJyaWVyRGlzbWlzc2libGU6IGZhbHNlLAogICAgICAgICAgYnVpbGRlcjogKEJ1aWxkQ29udGV4dCBjb250ZXh0KSB7CiAgICAgICAgICAgIHJldHVybiBhbGVydERpYWxvZ0NvbnRlbnQoKTsKICAgICAgICAgIH0sCiAgICAgICAgKTsKICAgICAgfSk7CiAgICB9CiAgfQoKICBAb3ZlcnJpZGUKICB2b2lkIGRpc3Bvc2UoKSB7CiAgICBzdXBlci5kaXNwb3NlKCk7CiAgfQoKICBfb25TdWNjZXNzQ2FsbGJhY2soc3luY1N0YXR1cykgewogICAgc2hvd1NuYWNrQmFyKCdTeW5jIHN1Y2Nlc3NmdWwnKTsKICB9CgogIF9vbkVycm9yQ2FsbGJhY2soc3luY1N0YXR1cykgewogICAgc2hvd1NuYWNrQmFyKCdTeW5jIG5vdCBzdWNjZXNzZnVsJywgaXNFcnJvcjogdHJ1ZSk7CiAgfQoKICBAb3ZlcnJpZGUKICBXaWRnZXQgYnVpbGQoQnVpbGRDb250ZXh0IGNvbnRleHQpIHsKICAgIHJldHVybiBTY2FmZm9sZCgKICAgICAgYXBwQmFyOiBBcHBCYXIoCiAgICAgICAgdGl0bGU6IGNvbnN0IFRleHQoJ1NlY29uZCBTY3JlZW4nKSwKICAgICAgKSwKICAgICAgYm9keTogQ2VudGVyKAogICAgICAgIGNoaWxkOiBMaXN0VmlldygKICAgICAgICAgIC8vIG1haW5BeGlzU2l6ZTogTWFpbkF4aXNTaXplLm1pbiwKICAgICAgICAgIHBhZGRpbmc6IGNvbnN0IEVkZ2VJbnNldHMuYWxsKDIwKSwKICAgICAgICAgIGNoaWxkcmVuOiBbCiAgICAgICAgICAgIENvbnRhaW5lcigKICAgICAgICAgICAgICBwYWRkaW5nOiBjb25zdCBFZGdlSW5zZXRzLm9ubHkodG9wOiAyMC4wLCBib3R0b206IDIwLjApLAogICAgICAgICAgICAgIGNoaWxkOiBUZXh0KAogICAgICAgICAgICAgICAgJ1dlbGNvbWUgJGFjdGl2ZUF0U2lnbiEnLAogICAgICAgICAgICAgICAgc3R5bGU6IGNvbnN0IFRleHRTdHlsZShmb250U2l6ZTogMjApLAogICAgICAgICAgICAgICksCiAgICAgICAgICAgICksCiAgICAgICAgICAgIEVsZXZhdGVkQnV0dG9uKAogICAgICAgICAgICAgIG9uUHJlc3NlZDogKCkgYXN5bmMgewogICAgICAgICAgICAgICAgYXdhaXQgQXRTeW5jVUlTZXJ2aWNlKCkuc3luYygpOwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgY2hpbGQ6IGNvbnN0IFRleHQoJ0RlZmF1bHQgU3luYycpLAogICAgICAgICAgICApLAogICAgICAgICAgICBFbGV2YXRlZEJ1dHRvbigKICAgICAgICAgICAgICBvblByZXNzZWQ6ICgpIGFzeW5jIHsKICAgICAgICAgICAgICAgIGF3YWl0IEF0U3luY1VJU2VydmljZSgpLnN5bmMoCiAgICAgICAgICAgICAgICAgIGF0U3luY1VJT3ZlcmxheTogQXRTeW5jVUlPdmVybGF5LmRpYWxvZywKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBjaGlsZDogY29uc3QgVGV4dCgnU3luYyB3aXRoIGRpYWxvZyBvdmVybGF5JyksCiAgICAgICAgICAgICksCiAgICAgICAgICAgIEVsZXZhdGVkQnV0dG9uKAogICAgICAgICAgICAgIG9uUHJlc3NlZDogKCkgYXN5bmMgewogICAgICAgICAgICAgICAgYXdhaXQgQXRTeW5jVUlTZXJ2aWNlKCkuc3luYygKICAgICAgICAgICAgICAgICAgYXRTeW5jVUlPdmVybGF5OiBBdFN5bmNVSU92ZXJsYXkuc25hY2tiYXIsCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgY2hpbGQ6IGNvbnN0IFRleHQoJ1N5bmMgd2l0aCBzbmFja2JhcicpLAogICAgICAgICAgICApLAogICAgICAgICAgICBFbGV2YXRlZEJ1dHRvbigKICAgICAgICAgICAgICBvblByZXNzZWQ6ICgpIGFzeW5jIHsKICAgICAgICAgICAgICAgIE5hdmlnYXRvci5wdXNoKGNvbnRleHQsIE1hdGVyaWFsUGFnZVJvdXRlKGJ1aWxkZXI6IChjb250ZXh0KSA9PiBjb25zdCBVSU9wdGlvbnMoKSkpOwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgY2hpbGQ6IGNvbnN0IFRleHQoJ1NlZSBhbGwgVUkgb3B0aW9ucycpLAogICAgICAgICAgICApLAogICAgICAgICAgXSwKICAgICAgICApLAogICAgICApLAogICAgKTsKICB9CgogIFdpZGdldCBhbGVydERpYWxvZ0NvbnRlbnQoKSB7CiAgICByZXR1cm4gQWxlcnREaWFsb2coCiAgICAgIHRpdGxlOiBjb25zdCBUZXh0KCd5b3UgYXJlIG5vdCBhdXRoZW50aWNhdGVkLicpLAogICAgICBhY3Rpb25zOiBbCiAgICAgICAgVGV4dEJ1dHRvbigKICAgICAgICAgIG9uUHJlc3NlZDogKCkgYXN5bmMgewogICAgICAgICAgICBOYXZpZ2F0b3Iub2YoY29udGV4dCkucG9wKCk7CiAgICAgICAgICAgIE5hdmlnYXRvci5vZihjb250ZXh0KS5wb3AoKTsKICAgICAgICAgIH0sCiAgICAgICAgICBjaGlsZDogY29uc3QgVGV4dCgKICAgICAgICAgICAgJ09rJywKICAgICAgICAgICAgc3R5bGU6IFRleHRTdHlsZShjb2xvcjogQ29sb3JzLmJsYWNrKSwKICAgICAgICAgICksCiAgICAgICAgKSwKICAgICAgXSwKICAgICk7CiAgfQoKICB2b2lkIHNob3dTbmFja0JhcihTdHJpbmcgbXNnLCB7Ym9vbCBpc0Vycm9yID0gZmFsc2V9KSB7CiAgICBTY2FmZm9sZE1lc3Nlbmdlci5vZihOYXZTZXJ2aWNlLm5hdktleS5jdXJyZW50Q29udGV4dCEpLnNob3dTbmFja0JhcihTbmFja0JhcigKICAgICAgYmFja2dyb3VuZENvbG9yOiBpc0Vycm9yID8gY29uc3QgQ29sb3IoMHhGRmUzNDA0MCkgOiBDb2xvcnMuZ3JlZW4sCiAgICAgIGNvbnRlbnQ6IFRleHQoCiAgICAgICAgbXNnLAogICAgICAgIHN0eWxlOiBjb25zdCBUZXh0U3R5bGUoY29sb3I6IENvbG9ycy53aGl0ZSwgZm9udFNpemU6IDE2LCBsZXR0ZXJTcGFjaW5nOiAwLjEsIGZvbnRXZWlnaHQ6IEZvbnRXZWlnaHQubm9ybWFsKSwKICAgICAgKSwKICAgICkpOwogIH0KfQo=",
      "type": "text"
    },
    {
      "path": "lib/main.dart",
      "data":
          "aW1wb3J0ICdkYXJ0OmFzeW5jJzsKaW1wb3J0ICdwYWNrYWdlOmF0X29uYm9hcmRpbmdfZmx1dHRlci9hdF9vbmJvYXJkaW5nX2ZsdXR0ZXIuZGFydCc7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyL21hdGVyaWFsLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6YXRfY2xpZW50X21vYmlsZS9hdF9jbGllbnRfbW9iaWxlLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6YXRfdXRpbHMvYXRfbG9nZ2VyLmRhcnQnIHNob3cgQXRTaWduTG9nZ2VyOwppbXBvcnQgJ3BhY2thZ2U6cGF0aF9wcm92aWRlci9wYXRoX3Byb3ZpZGVyLmRhcnQnIHNob3cgZ2V0QXBwbGljYXRpb25TdXBwb3J0RGlyZWN0b3J5OwppbXBvcnQgJ3BhY2thZ2U6YXRfYXBwX2ZsdXR0ZXIvYXRfYXBwX2ZsdXR0ZXIuZGFydCcgc2hvdyBBdEVudjsKaW1wb3J0ICdob21lX3NjcmVlbi5kYXJ0JzsKCkZ1dHVyZTx2b2lkPiBtYWluKCkgYXN5bmMgewogIGF3YWl0IEF0RW52LmxvYWQoKTsKICBydW5BcHAoY29uc3QgTXlBcHAoKSk7Cn0KCkZ1dHVyZTxBdENsaWVudFByZWZlcmVuY2U+IGxvYWRBdENsaWVudFByZWZlcmVuY2UoKSBhc3luYyB7CiAgdmFyIGRpciA9IGF3YWl0IGdldEFwcGxpY2F0aW9uU3VwcG9ydERpcmVjdG9yeSgpOwogIHJldHVybiBBdENsaWVudFByZWZlcmVuY2UoKQogICAgLi5yb290RG9tYWluID0gQXRFbnYucm9vdERvbWFpbgogICAgLi5uYW1lc3BhY2UgPSBBdEVudi5hcHBOYW1lc3BhY2UKICAgIC4uaGl2ZVN0b3JhZ2VQYXRoID0gZGlyLnBhdGgKICAgIC4uY29tbWl0TG9nUGF0aCA9IGRpci5wYXRoCiAgICAuLmlzTG9jYWxTdG9yZVJlcXVpcmVkID0gdHJ1ZTsKfQoKY2xhc3MgTXlBcHAgZXh0ZW5kcyBTdGF0ZWZ1bFdpZGdldCB7CiAgY29uc3QgTXlBcHAoe0tleT8ga2V5fSkgOiBzdXBlcihrZXk6IGtleSk7CiAgQG92ZXJyaWRlCiAgX015QXBwU3RhdGUgY3JlYXRlU3RhdGUoKSA9PiBfTXlBcHBTdGF0ZSgpOwp9CgpjbGFzcyBfTXlBcHBTdGF0ZSBleHRlbmRzIFN0YXRlPE15QXBwPiB7CiAgLy8gKiBsb2FkIHRoZSBBdENsaWVudFByZWZlcmVuY2UgaW4gdGhlIGJhY2tncm91bmQKICBGdXR1cmU8QXRDbGllbnRQcmVmZXJlbmNlPiBmdXR1cmVQcmVmZXJlbmNlID0gbG9hZEF0Q2xpZW50UHJlZmVyZW5jZSgpOwogIEF0Q2xpZW50UHJlZmVyZW5jZT8gYXRDbGllbnRQcmVmZXJlbmNlOwogIEF0Q2xpZW50U2VydmljZT8gYXRDbGllbnRTZXJ2aWNlOwoKICBmaW5hbCBBdFNpZ25Mb2dnZXIgX2xvZ2dlciA9IEF0U2lnbkxvZ2dlcihBdEVudi5hcHBOYW1lc3BhY2UpOwoKICBAb3ZlcnJpZGUKICBXaWRnZXQgYnVpbGQoQnVpbGRDb250ZXh0IGNvbnRleHQpIHsKICAgIHJldHVybiBNYXRlcmlhbEFwcCgKICAgICAgLy8gKiBUaGUgb25ib2FyZGluZyBzY3JlZW4gKGZpcnN0IHNjcmVlbikKICAgICAgbmF2aWdhdG9yS2V5OiBOYXZTZXJ2aWNlLm5hdktleSwKICAgICAgaG9tZTogU2NhZmZvbGQoCiAgICAgICAgICBhcHBCYXI6IEFwcEJhcigKICAgICAgICAgICAgdGl0bGU6IGNvbnN0IFRleHQoJ2F0X3N5bmNfdWlfZmx1dHRlciBleGFtcGxlIGFwcCcpLAogICAgICAgICAgKSwKICAgICAgICAgIGJvZHk6IEJ1aWxkZXIoCiAgICAgICAgICAgIGJ1aWxkZXI6IChjb250ZXh0KSA9PiBDb2x1bW4oCiAgICAgICAgICAgICAgY2hpbGRyZW46IFsKICAgICAgICAgICAgICAgIGNvbnN0IFNpemVkQm94KAogICAgICAgICAgICAgICAgICBoZWlnaHQ6IDI1LAogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIENlbnRlcigKICAgICAgICAgICAgICAgICAgY2hpbGQ6IEVsZXZhdGVkQnV0dG9uKAogICAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogKCkgYXN5bmMgewogICAgICAgICAgICAgICAgICAgICAgQXRPbmJvYXJkaW5nUmVzdWx0IG9uYm9hcmRpbmdSZXN1bHQgPSBhd2FpdCBBdE9uYm9hcmRpbmcub25ib2FyZCgKICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dDogY29udGV4dCwKICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnOiBBdE9uYm9hcmRpbmdDb25maWcoCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXRDbGllbnRQcmVmZXJlbmNlOiBhd2FpdCBmdXR1cmVQcmVmZXJlbmNlLAogICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3RFbnZpcm9ubWVudDogQXRFbnYucm9vdEVudmlyb25tZW50LAogICAgICAgICAgICAgICAgICAgICAgICAgIGRvbWFpbjogQXRFbnYucm9vdERvbWFpbiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBBUElLZXk6IEF0RW52LmFwcEFwaUtleSwKICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG9uYm9hcmRpbmdSZXN1bHQuc3RhdHVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgQXRPbmJvYXJkaW5nUmVzdWx0U3RhdHVzLnN1Y2Nlc3M6CiAgICAgICAgICAgICAgICAgICAgICAgICAgTmF2aWdhdG9yLnB1c2goCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0ZXJpYWxQYWdlUm91dGUoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkZXI6IChfKSA9PiBIb21lU2NyZWVuKGFjdGl2ZUF0U2lnbjogKG9uYm9hcmRpbmdSZXN1bHQuYXRzaWduID8/ICcnKSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgQXRPbmJvYXJkaW5nUmVzdWx0U3RhdHVzLmVycm9yOgogICAgICAgICAgICAgICAgICAgICAgICAgIFNjYWZmb2xkTWVzc2VuZ2VyLm9mKGNvbnRleHQpLnNob3dTbmFja0JhcigKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IFNuYWNrQmFyKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IENvbG9ycy5yZWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFRleHQoJ0FuIGVycm9yIGhhcyBvY2N1cnJlZCcpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICBjYXNlIEF0T25ib2FyZGluZ1Jlc3VsdFN0YXR1cy5jYW5jZWw6CiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBjaGlsZDogY29uc3QgVGV4dCgnT25ib2FyZCBhbiBAc2lnbicpLAogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIGNvbnN0IFNpemVkQm94KAogICAgICAgICAgICAgICAgICBoZWlnaHQ6IDI1LAogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIENlbnRlcigKICAgICAgICAgICAgICAgICAgICBjaGlsZDogVGV4dEJ1dHRvbigKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IEJ1dHRvblN0eWxlKAogICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogTWF0ZXJpYWxTdGF0ZVByb3BlcnR5LmFsbDxDb2xvcj4oQ29sb3JzLmJsYWNrMTIpLAogICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICBvblByZXNzZWQ6ICgpIGFzeW5jIHsKICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2F0c2lnbnNMaXN0ID0gYXdhaXQgS2V5Y2hhaW5VdGlsLmdldEF0c2lnbkxpc3QoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKFN0cmluZyBhdHNpZ24gaW4gKF9hdHNpZ25zTGlzdCA/PyBbXSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IEtleWNoYWluVXRpbC5yZXNldEF0U2lnbkZyb21LZXljaGFpbihhdHNpZ24pOwogICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgU2NhZmZvbGRNZXNzZW5nZXIub2YoY29udGV4dCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNob3dTbmFja0Jhcihjb25zdCBTbmFja0Jhcihjb250ZW50OiBUZXh0KCdDbGVhcmVkIGFsbCBwYWlyZWQgYXRzaWducycpKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBjb25zdCBUZXh0KCdDbGVhciBwYWlyZWQgYXRzaWducycsIHN0eWxlOiBUZXh0U3R5bGUoY29sb3I6IENvbG9ycy5ibGFjaykpKSksCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgKSwKICAgICAgICAgICkpLAogICAgKTsKICB9Cn0KCmNsYXNzIE5hdlNlcnZpY2UgewogIHN0YXRpYyBHbG9iYWxLZXk8TmF2aWdhdG9yU3RhdGU+IG5hdktleSA9IEdsb2JhbEtleSgpOwp9Cg==",
      "type": "text"
    },
    {
      "path": "lib/ui_options.dart",
      "data":
          "",
      "type": "text"
    }
  ],
  "hooks": [],
  "name": "at_sync_ui_flutter",
  "description": "A sample of how to use the at_sync_ui_flutter package.",
  "version": "0.1.0",
  "environment": {"mason": "any"},
  "vars": {}
});
