// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: prefer_single_quotes, public_member_api_docs, lines_longer_than_80_chars, implicit_dynamic_list_literal, implicit_dynamic_map_literal

import 'package:mason/mason.dart';

final atNotifyFlutterBundle = MasonBundle.fromJson(<String, dynamic>{
  "files": [
    {
      "path": "lib/home_screen.dart",
      "data":
          "aW1wb3J0ICdwYWNrYWdlOmF0X2FwcF9mbHV0dGVyL2F0X2FwcF9mbHV0dGVyLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9tYXRlcmlhbC5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOmF0X2NsaWVudF9tb2JpbGUvYXRfY2xpZW50X21vYmlsZS5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOmF0X25vdGlmeV9mbHV0dGVyL3NjcmVlbnMvbm90aWZ5X3NjcmVlbi5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOmF0X25vdGlmeV9mbHV0dGVyL3NlcnZpY2VzL25vdGlmeV9zZXJ2aWNlLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6YXRfbm90aWZ5X2ZsdXR0ZXIvdXRpbHMvaW5pdF9ub3RpZnlfc2VydmljZS5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOmF0X25vdGlmeV9mbHV0dGVyL3V0aWxzL25vdGlmeV91dGlscy5kYXJ0JzsKCmltcG9ydCAncGFja2FnZTphdF9sb29rdXAvYXRfbG9va3VwLmRhcnQnOwoKaW1wb3J0ICdtYWluLmRhcnQnOwoKLy8qIFRoZSBuZXh0IHNjcmVlbiBhZnRlciBvbmJvYXJkaW5nIChzZWNvbmQgc2NyZWVuKQpjbGFzcyBIb21lU2NyZWVuIGV4dGVuZHMgU3RhdGVmdWxXaWRnZXQgewogIGNvbnN0IEhvbWVTY3JlZW4oe0tleT8ga2V5fSkgOiBzdXBlcihrZXk6IGtleSk7CgogIEBvdmVycmlkZQogIF9Ib21lU2NyZWVuU3RhdGUgY3JlYXRlU3RhdGUoKSA9PiBfSG9tZVNjcmVlblN0YXRlKCk7Cn0KCmNsYXNzIF9Ib21lU2NyZWVuU3RhdGUgZXh0ZW5kcyBTdGF0ZTxIb21lU2NyZWVuPiB7CiAgR2xvYmFsS2V5PFNjYWZmb2xkU3RhdGU+IHNjYWZmb2xkS2V5ID0gR2xvYmFsS2V5PFNjYWZmb2xkU3RhdGU+KCk7CiAgU3RyaW5nPyBhY3RpdmVBdFNpZ247CiAgdmFyIGF0Q2xpZW50TWFuYWdlciA9IEF0Q2xpZW50TWFuYWdlci5nZXRJbnN0YW5jZSgpOwogIEF0Q2xpZW50UHJlZmVyZW5jZSBhdENsaWVudFByZWZlcmVuY2UgPSBBdENsaWVudFByZWZlcmVuY2UoKTsKICBUZXh0RWRpdGluZ0NvbnRyb2xsZXIgYXRTaWduQ29udHJvbGxlciA9IFRleHRFZGl0aW5nQ29udHJvbGxlcih0ZXh0OiAnJyk7CiAgVGV4dEVkaXRpbmdDb250cm9sbGVyIG1lc3NhZ2VDb250cm9sbGVyID0gVGV4dEVkaXRpbmdDb250cm9sbGVyKHRleHQ6ICcnKTsKCiAgQG92ZXJyaWRlCiAgdm9pZCBpbml0U3RhdGUoKSB7CiAgICBnZXRBdFNpZ25BbmRJbml0aWFsaXplTm90aWZ5KCk7CiAgICBzdXBlci5pbml0U3RhdGUoKTsKICB9CgogIEBvdmVycmlkZQogIFdpZGdldCBidWlsZChCdWlsZENvbnRleHQgY29udGV4dCkgewogICAgcmV0dXJuIFNjYWZmb2xkKAogICAgICBrZXk6IHNjYWZmb2xkS2V5LAogICAgICBhcHBCYXI6IEFwcEJhcigKICAgICAgICB0aXRsZTogY29uc3QgVGV4dCgnTm90aWZ5IEV4YW1wbGUnKSwKICAgICAgKSwKICAgICAgYm9keTogQnVpbGRlcigKICAgICAgICBidWlsZGVyOiAoY29udGV4dCkgPT4gQ2VudGVyKAogICAgICAgICAgY2hpbGQ6IENvbnRhaW5lcigKICAgICAgICAgICAgcGFkZGluZzogY29uc3QgRWRnZUluc2V0cy5hbGwoMjApLAogICAgICAgICAgICBjaGlsZDogQ29sdW1uKAogICAgICAgICAgICAgIG1haW5BeGlzU2l6ZTogTWFpbkF4aXNTaXplLm1pbiwKICAgICAgICAgICAgICBjaGlsZHJlbjogWwogICAgICAgICAgICAgICAgVGV4dCgKICAgICAgICAgICAgICAgICAgJ1dlbGNvbWUgJGFjdGl2ZUF0U2lnbicsCiAgICAgICAgICAgICAgICAgIHN0eWxlOiBjb25zdCBUZXh0U3R5bGUoZm9udFNpemU6IDIwKSwKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBjb25zdCBTaXplZEJveCgKICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxNi4wLAogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIFRleHRGaWVsZCgKICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogYXRTaWduQ29udHJvbGxlciwKICAgICAgICAgICAgICAgICAgZGVjb3JhdGlvbjogY29uc3QgSW5wdXREZWNvcmF0aW9uKAogICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiBPdXRsaW5lSW5wdXRCb3JkZXIoKSwgaGludFRleHQ6ICdAYXRTaWduJyksCiAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlZDogKHRleHQpIHt9LAogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIGNvbnN0IFNpemVkQm94KAogICAgICAgICAgICAgICAgICBoZWlnaHQ6IDguMCwKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBUZXh0RmllbGQoCiAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IG1lc3NhZ2VDb250cm9sbGVyLAogICAgICAgICAgICAgICAgICBkZWNvcmF0aW9uOiBjb25zdCBJbnB1dERlY29yYXRpb24oCiAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IE91dGxpbmVJbnB1dEJvcmRlcigpLCBoaW50VGV4dDogJ0VudGVyIE1lc3NhZ2UnKSwKICAgICAgICAgICAgICAgICAgb25DaGFuZ2VkOiAodGV4dCkge30sCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgY29uc3QgU2l6ZWRCb3goCiAgICAgICAgICAgICAgICAgIGhlaWdodDogMTYuMCwKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBUZXh0QnV0dG9uKAogICAgICAgICAgICAgICAgICBvblByZXNzZWQ6IF9zZW5kTWVzc2FnZSwKICAgICAgICAgICAgICAgICAgY2hpbGQ6IGNvbnN0IFRleHQoCiAgICAgICAgICAgICAgICAgICAgJ05vdGlmeSBUZXh0JywKICAgICAgICAgICAgICAgICAgICBzdHlsZTogVGV4dFN0eWxlKGZvbnRTaXplOiAxNiksCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgVGV4dEJ1dHRvbigKICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiAoKSBhc3luYyB7CiAgICAgICAgICAgICAgICAgICAgTmF2aWdhdG9yLnB1c2goCiAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LAogICAgICAgICAgICAgICAgICAgICAgTWF0ZXJpYWxQYWdlUm91dGUoCiAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRlcjogKGNvbnRleHQpID0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5vdGlmeVNjcmVlbihub3RpZnlTZXJ2aWNlOiBOb3RpZnlTZXJ2aWNlKCkpKSwKICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBjaGlsZDogY29uc3QgVGV4dCgKICAgICAgICAgICAgICAgICAgICAnR2V0IHBhc3Qgbm90aWZpY2F0aW9ucycsCiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IFRleHRTdHlsZShmb250U2l6ZTogMTYpLAogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBdLAogICAgICAgICAgICApLAogICAgICAgICAgKSwKICAgICAgICApLAogICAgICApLAogICAgKTsKICB9CgogIF9zZW5kTWVzc2FnZSgpIGFzeW5jIHsKICAgIGlmIChhdFNpZ25Db250cm9sbGVyLnRleHQuaXNFbXB0eSkgewogICAgICBzaG93U25hY2tCYXIoJ0VudGVyIGF0c2lnbicpOwogICAgICByZXR1cm47CiAgICB9CgogICAgaWYgKG1lc3NhZ2VDb250cm9sbGVyLnRleHQuaXNFbXB0eSkgewogICAgICBzaG93U25hY2tCYXIoJ0VudGVyIG1lc3NhZ2UnKTsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIHZhciBfaXNWYWxpZEF0c2lnbiA9IGF3YWl0IGNoZWNrQXRzaWduKCk7CiAgICBpZiAoIV9pc1ZhbGlkQXRzaWduKSB7CiAgICAgIHNob3dTbmFja0JhcignQXRzaWduIG5vdCB2YWxpZCcpOwogICAgICByZXR1cm47CiAgICB9CgogICAgdmFyIF9yZXMgPSBhd2FpdCBub3RpZnlUZXh0KAogICAgICBjb250ZXh0LAogICAgICBhY3RpdmVBdFNpZ24sCiAgICAgIGF0U2lnbkNvbnRyb2xsZXIudGV4dCwKICAgICAgbWVzc2FnZUNvbnRyb2xsZXIudGV4dCwKICAgICk7CiAgICBpZiAoX3JlcykgewogICAgICBtZXNzYWdlQ29udHJvbGxlci5jbGVhcigpOwogICAgICBzaG93U25hY2tCYXIoJ01lc3NhZ2Ugc2VudCBzdWNjZXNmdWxseScsIGNvbG9yOiBDb2xvcnMuZ3JlZW4pOwogICAgfSBlbHNlIHsKICAgICAgc2hvd1NuYWNrQmFyKCdTb21ldGhpbmcgd2VudCB3cm9uZycpOwogICAgfQogIH0KCiAgRnV0dXJlPGJvb2w+IGNoZWNrQXRzaWduKCkgYXN5bmMgewogICAgaWYgKGF0U2lnbkNvbnRyb2xsZXIudGV4dC5pc0VtcHR5KSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0gZWxzZSBpZiAoIWF0U2lnbkNvbnRyb2xsZXIudGV4dC5jb250YWlucygnQCcpKSB7CiAgICAgIGF0U2lnbkNvbnRyb2xsZXIudGV4dCA9ICdAJyArIGF0U2lnbkNvbnRyb2xsZXIudGV4dDsKICAgIH0KICAgIC8vIGlnbm9yZTogZGVwcmVjYXRlZF9tZW1iZXJfdXNlCiAgICB2YXIgY2hlY2tQcmVzZW5jZSA9IGF3YWl0IEF0TG9va3VwSW1wbC5maW5kU2Vjb25kYXJ5KAogICAgICAgIGF0U2lnbkNvbnRyb2xsZXIudGV4dCwgQXRFbnYucm9vdERvbWFpbiwgNjQpOwogICAgcmV0dXJuIGNoZWNrUHJlc2VuY2UgIT0gbnVsbDsKICB9CgogIHZvaWQgZ2V0QXRTaWduQW5kSW5pdGlhbGl6ZU5vdGlmeSgpIGFzeW5jIHsKICAgIHZhciBjdXJyZW50QXRTaWduID0gYXRDbGllbnRNYW5hZ2VyLmF0Q2xpZW50LmdldEN1cnJlbnRBdFNpZ24oKTsKICAgIHNldFN0YXRlKCgpIHsKICAgICAgYWN0aXZlQXRTaWduID0gY3VycmVudEF0U2lnbjsKICAgIH0pOwoKICAgIGF0Q2xpZW50UHJlZmVyZW5jZSA9IGF3YWl0IGxvYWRBdENsaWVudFByZWZlcmVuY2UoKTsKCiAgICBpbml0aWFsaXplTm90aWZ5U2VydmljZSgKICAgICAgYXRDbGllbnRNYW5hZ2VyLAogICAgICBhY3RpdmVBdFNpZ24hLAogICAgICBhdENsaWVudFByZWZlcmVuY2UsCiAgICAgIHJvb3REb21haW46IEF0RW52LnJvb3REb21haW4sCiAgICApOwogIH0KCiAgc2hvd1NuYWNrQmFyKFN0cmluZyB0ZXh0LCB7Q29sb3IgY29sb3IgPSBDb2xvcnMucmVkfSkgewogICAgU2NhZmZvbGRNZXNzZW5nZXIub2Yoc2NhZmZvbGRLZXkuY3VycmVudENvbnRleHQhKS5zaG93U25hY2tCYXIoU25hY2tCYXIoCiAgICAgIGJhY2tncm91bmRDb2xvcjogY29sb3IsCiAgICAgIGRpc21pc3NEaXJlY3Rpb246IERpc21pc3NEaXJlY3Rpb24uaG9yaXpvbnRhbCwKICAgICAgY29udGVudDogVGV4dCgKICAgICAgICB0ZXh0LAogICAgICAgIHN0eWxlOiBjb25zdCBUZXh0U3R5bGUoCiAgICAgICAgICBjb2xvcjogQ29sb3JzLndoaXRlLAogICAgICAgICAgZm9udFNpemU6IDE0LAogICAgICAgICAgbGV0dGVyU3BhY2luZzogMC4xLAogICAgICAgICAgZm9udFdlaWdodDogRm9udFdlaWdodC5ub3JtYWwsCiAgICAgICAgKSwKICAgICAgKSwKICAgICkpOwogIH0KfQo=",
      "type": "text"
    },
    {
      "path": "lib/main.dart",
      "data":
          "aW1wb3J0ICdkYXJ0OmFzeW5jJzsKCmltcG9ydCAncGFja2FnZTphdF9vbmJvYXJkaW5nX2ZsdXR0ZXIvYXRfb25ib2FyZGluZ19mbHV0dGVyLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9tYXRlcmlhbC5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOmF0X2NsaWVudF9tb2JpbGUvYXRfY2xpZW50X21vYmlsZS5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOmF0X3V0aWxzL2F0X2xvZ2dlci5kYXJ0JyBzaG93IEF0U2lnbkxvZ2dlcjsKaW1wb3J0ICdwYWNrYWdlOnBhdGhfcHJvdmlkZXIvcGF0aF9wcm92aWRlci5kYXJ0JyBzaG93IGdldEFwcGxpY2F0aW9uU3VwcG9ydERpcmVjdG9yeTsKaW1wb3J0ICdwYWNrYWdlOmF0X2FwcF9mbHV0dGVyL2F0X2FwcF9mbHV0dGVyLmRhcnQnIHNob3cgQXRFbnY7CgppbXBvcnQgJ2hvbWVfc2NyZWVuLmRhcnQnOwoKRnV0dXJlPHZvaWQ+IG1haW4oKSBhc3luYyB7CiAgYXdhaXQgQXRFbnYubG9hZCgpOwogIHJ1bkFwcChjb25zdCBNeUFwcCgpKTsKfQoKRnV0dXJlPEF0Q2xpZW50UHJlZmVyZW5jZT4gbG9hZEF0Q2xpZW50UHJlZmVyZW5jZSgpIGFzeW5jIHsKICB2YXIgZGlyID0gYXdhaXQgZ2V0QXBwbGljYXRpb25TdXBwb3J0RGlyZWN0b3J5KCk7CiAgcmV0dXJuIEF0Q2xpZW50UHJlZmVyZW5jZSgpCiAgICAuLnJvb3REb21haW4gPSBBdEVudi5yb290RG9tYWluCiAgICAuLm5hbWVzcGFjZSA9IEF0RW52LmFwcE5hbWVzcGFjZQogICAgLi5oaXZlU3RvcmFnZVBhdGggPSBkaXIucGF0aAogICAgLi5jb21taXRMb2dQYXRoID0gZGlyLnBhdGgKICAgIC4uaXNMb2NhbFN0b3JlUmVxdWlyZWQgPSB0cnVlOwp9CgpjbGFzcyBNeUFwcCBleHRlbmRzIFN0YXRlZnVsV2lkZ2V0IHsKICBjb25zdCBNeUFwcCh7S2V5PyBrZXl9KSA6IHN1cGVyKGtleToga2V5KTsKICBAb3ZlcnJpZGUKICBfTXlBcHBTdGF0ZSBjcmVhdGVTdGF0ZSgpID0+IF9NeUFwcFN0YXRlKCk7Cn0KCmNsYXNzIF9NeUFwcFN0YXRlIGV4dGVuZHMgU3RhdGU8TXlBcHA+IHsKICAvLyAqIGxvYWQgdGhlIEF0Q2xpZW50UHJlZmVyZW5jZSBpbiB0aGUgYmFja2dyb3VuZAogIEZ1dHVyZTxBdENsaWVudFByZWZlcmVuY2U+IGZ1dHVyZVByZWZlcmVuY2UgPSBsb2FkQXRDbGllbnRQcmVmZXJlbmNlKCk7CiAgQXRDbGllbnRQcmVmZXJlbmNlPyBhdENsaWVudFByZWZlcmVuY2U7CiAgQXRDbGllbnRTZXJ2aWNlPyBhdENsaWVudFNlcnZpY2U7CgogIGZpbmFsIEF0U2lnbkxvZ2dlciBfbG9nZ2VyID0gQXRTaWduTG9nZ2VyKEF0RW52LmFwcE5hbWVzcGFjZSk7CgogIEBvdmVycmlkZQogIFdpZGdldCBidWlsZChCdWlsZENvbnRleHQgY29udGV4dCkgewogICAgcmV0dXJuIE1hdGVyaWFsQXBwKAogICAgICAvLyAqIFRoZSBvbmJvYXJkaW5nIHNjcmVlbiAoZmlyc3Qgc2NyZWVuKQogICAgICBob21lOiBTY2FmZm9sZCgKICAgICAgICAgIGFwcEJhcjogQXBwQmFyKAogICAgICAgICAgICB0aXRsZTogY29uc3QgVGV4dCgnYXRfbm90aWZ5X2ZsdXR0ZXIgZXhhbXBsZSBhcHAnKSwKICAgICAgICAgICksCiAgICAgICAgICBib2R5OiBCdWlsZGVyKAogICAgICAgICAgICBidWlsZGVyOiAoY29udGV4dCkgPT4gQ29sdW1uKAogICAgICAgICAgICAgIGNoaWxkcmVuOiBbCiAgICAgICAgICAgICAgICBjb25zdCBTaXplZEJveCgKICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAyNSwKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBDZW50ZXIoCiAgICAgICAgICAgICAgICAgIGNoaWxkOiBFbGV2YXRlZEJ1dHRvbigKICAgICAgICAgICAgICBvblByZXNzZWQ6ICgpIGFzeW5jIHsKICAgICAgICAgICAgICAgIEF0T25ib2FyZGluZ1Jlc3VsdCBvbmJvYXJkaW5nUmVzdWx0ID0gYXdhaXQgQXRPbmJvYXJkaW5nLm9uYm9hcmQoCiAgICAgICAgICAgICAgICAgIGNvbnRleHQ6IGNvbnRleHQsCiAgICAgICAgICAgICAgICAgIGNvbmZpZzogQXRPbmJvYXJkaW5nQ29uZmlnKAogICAgICAgICAgICAgICAgICAgIGF0Q2xpZW50UHJlZmVyZW5jZTogYXdhaXQgZnV0dXJlUHJlZmVyZW5jZSwKICAgICAgICAgICAgICAgICAgICByb290RW52aXJvbm1lbnQ6IEF0RW52LnJvb3RFbnZpcm9ubWVudCwKICAgICAgICAgICAgICAgICAgICBkb21haW46IEF0RW52LnJvb3REb21haW4sCiAgICAgICAgICAgICAgICAgICAgYXBwQVBJS2V5OiBBdEVudi5hcHBBcGlLZXksCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgc3dpdGNoIChvbmJvYXJkaW5nUmVzdWx0LnN0YXR1cykgewogICAgICAgICAgICAgICAgICBjYXNlIEF0T25ib2FyZGluZ1Jlc3VsdFN0YXR1cy5zdWNjZXNzOgogICAgICAgICAgICAgICAgICAgIE5hdmlnYXRvci5wdXNoKGNvbnRleHQsIE1hdGVyaWFsUGFnZVJvdXRlKGJ1aWxkZXI6IChfKSA9PiBjb25zdCBIb21lU2NyZWVuKCkpKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgY2FzZSBBdE9uYm9hcmRpbmdSZXN1bHRTdGF0dXMuZXJyb3I6CiAgICAgICAgICAgICAgICAgICAgU2NhZmZvbGRNZXNzZW5nZXIub2YoY29udGV4dCkuc2hvd1NuYWNrQmFyKAogICAgICAgICAgICAgICAgICAgICAgY29uc3QgU25hY2tCYXIoCiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogQ29sb3JzLnJlZCwKICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogVGV4dCgnQW4gZXJyb3IgaGFzIG9jY3VycmVkJyksCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIGNhc2UgQXRPbmJvYXJkaW5nUmVzdWx0U3RhdHVzLmNhbmNlbDoKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGNoaWxkOiBjb25zdCBUZXh0KCdPbmJvYXJkIGFuIEBzaWduJyksCiAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgY29uc3QgU2l6ZWRCb3goCiAgICAgICAgICAgICAgICAgIGhlaWdodDogMjUsCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgQ2VudGVyKAogICAgICAgICAgICAgICAgICAgIGNoaWxkOiBUZXh0QnV0dG9uKAogICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogQnV0dG9uU3R5bGUoCiAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBNYXRlcmlhbFN0YXRlUHJvcGVydHkuYWxsPENvbG9yPihDb2xvcnMuYmxhY2sxMiksCiAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogKCkgYXN5bmMgewogICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYXRzaWduc0xpc3QgPSBhd2FpdCBLZXljaGFpblV0aWwuZ2V0QXRzaWduTGlzdCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoU3RyaW5nIGF0c2lnbiBpbiAoX2F0c2lnbnNMaXN0ID8/IFtdKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgS2V5Y2hhaW5VdGlsLnJlc2V0QXRTaWduRnJvbUtleWNoYWluKGF0c2lnbik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICBTY2FmZm9sZE1lc3Nlbmdlci5vZihjb250ZXh0KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2hvd1NuYWNrQmFyKGNvbnN0IFNuYWNrQmFyKGNvbnRlbnQ6IFRleHQoJ0NsZWFyZWQgYWxsIHBhaXJlZCBhdHNpZ25zJykpKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IGNvbnN0IFRleHQoJ0NsZWFyIHBhaXJlZCBhdHNpZ25zJywgc3R5bGU6IFRleHRTdHlsZShjb2xvcjogQ29sb3JzLmJsYWNrKSkpKSwKICAgICAgICAgICAgICBdLAogICAgICAgICAgICApLAogICAgICAgICAgKSksCiAgICApOwogIH0KfQo=",
      "type": "text"
    }
  ],
  "hooks": [],
  "name": "at_notify_flutter",
  "description": "A sample of how to use the at_notify_flutter package",
  "version": "0.1.0",
  "environment": {"mason": "any"},
  "vars": {}
});
