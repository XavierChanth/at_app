// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: prefer_single_quotes, public_member_api_docs, lines_longer_than_80_chars, implicit_dynamic_list_literal, implicit_dynamic_map_literal

import 'package:mason/mason.dart';

final atLocationFlutterBundle = MasonBundle.fromJson(<String, dynamic>{
  "files": [
    {
      "path": "lib/home_screen.dart",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "lib/main.dart",
      "data":
          "aW1wb3J0ICdkYXJ0OmFzeW5jJzsKaW1wb3J0ICdwYWNrYWdlOmF0X29uYm9hcmRpbmdfZmx1dHRlci9hdF9vbmJvYXJkaW5nX2ZsdXR0ZXIuZGFydCc7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyL21hdGVyaWFsLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6YXRfY2xpZW50X21vYmlsZS9hdF9jbGllbnRfbW9iaWxlLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6YXRfdXRpbHMvYXRfbG9nZ2VyLmRhcnQnIHNob3cgQXRTaWduTG9nZ2VyOwppbXBvcnQgJ3BhY2thZ2U6cGF0aF9wcm92aWRlci9wYXRoX3Byb3ZpZGVyLmRhcnQnIHNob3cgZ2V0QXBwbGljYXRpb25TdXBwb3J0RGlyZWN0b3J5OwppbXBvcnQgJ3BhY2thZ2U6YXRfYXBwX2ZsdXR0ZXIvYXRfYXBwX2ZsdXR0ZXIuZGFydCcgc2hvdyBBdEVudjsKCmltcG9ydCAnaG9tZV9zY3JlZW4uZGFydCc7CgpGdXR1cmU8dm9pZD4gbWFpbigpIGFzeW5jIHsKICBhd2FpdCBBdEVudi5sb2FkKCk7CiAgcnVuQXBwKGNvbnN0IE15QXBwKCkpOwp9CgpGdXR1cmU8QXRDbGllbnRQcmVmZXJlbmNlPiBsb2FkQXRDbGllbnRQcmVmZXJlbmNlKCkgYXN5bmMgewogIHZhciBkaXIgPSBhd2FpdCBnZXRBcHBsaWNhdGlvblN1cHBvcnREaXJlY3RvcnkoKTsKICByZXR1cm4gQXRDbGllbnRQcmVmZXJlbmNlKCkKICAgICAgICAuLnJvb3REb21haW4gPSBBdEVudi5yb290RG9tYWluCiAgICAgICAgLi5uYW1lc3BhY2UgPSBBdEVudi5hcHBOYW1lc3BhY2UKICAgICAgICAuLmhpdmVTdG9yYWdlUGF0aCA9IGRpci5wYXRoCiAgICAgICAgLi5jb21taXRMb2dQYXRoID0gZGlyLnBhdGgKICAgICAgICAuLmlzTG9jYWxTdG9yZVJlcXVpcmVkID0gdHJ1ZQogICAgICAvLyBpZ25vcmU6IHRvZG8KICAgICAgLy8gVE9ETyBzZXQgdGhlIHJlc3Qgb2YgeW91ciBBdENsaWVudFByZWZlcmVuY2UgaGVyZQogICAgICA7Cn0KCmNsYXNzIE15QXBwIGV4dGVuZHMgU3RhdGVmdWxXaWRnZXQgewogIGNvbnN0IE15QXBwKHtLZXk/IGtleX0pIDogc3VwZXIoa2V5OiBrZXkpOwogIEBvdmVycmlkZQogIF9NeUFwcFN0YXRlIGNyZWF0ZVN0YXRlKCkgPT4gX015QXBwU3RhdGUoKTsKfQoKY2xhc3MgX015QXBwU3RhdGUgZXh0ZW5kcyBTdGF0ZTxNeUFwcD4gewogIC8vICogbG9hZCB0aGUgQXRDbGllbnRQcmVmZXJlbmNlIGluIHRoZSBiYWNrZ3JvdW5kCiAgRnV0dXJlPEF0Q2xpZW50UHJlZmVyZW5jZT4gZnV0dXJlUHJlZmVyZW5jZSA9IGxvYWRBdENsaWVudFByZWZlcmVuY2UoKTsKICBBdENsaWVudFByZWZlcmVuY2U/IGF0Q2xpZW50UHJlZmVyZW5jZTsKICBBdENsaWVudFNlcnZpY2U/IGF0Q2xpZW50U2VydmljZTsKCiAgZmluYWwgQXRTaWduTG9nZ2VyIF9sb2dnZXIgPSBBdFNpZ25Mb2dnZXIoQXRFbnYuYXBwTmFtZXNwYWNlKTsKCiAgQG92ZXJyaWRlCiAgV2lkZ2V0IGJ1aWxkKEJ1aWxkQ29udGV4dCBjb250ZXh0KSB7CiAgICByZXR1cm4gTWF0ZXJpYWxBcHAoCiAgICAgIC8vICogVGhlIG9uYm9hcmRpbmcgc2NyZWVuIChmaXJzdCBzY3JlZW4pCiAgICAgIG5hdmlnYXRvcktleTogTmF2U2VydmljZS5uYXZLZXksCiAgICAgIGhvbWU6IFNjYWZmb2xkKAogICAgICAgICAgYXBwQmFyOiBBcHBCYXIoCiAgICAgICAgICAgIHRpdGxlOiBjb25zdCBUZXh0KCdhdF9sb2NhdGlvbl9mbHV0dGVyIGV4YW1wbGUgYXBwJyksCiAgICAgICAgICApLAogICAgICAgICAgYm9keTogQnVpbGRlcigKICAgICAgICAgICAgYnVpbGRlcjogKGNvbnRleHQpID0+IENvbHVtbigKICAgICAgICAgICAgICBjaGlsZHJlbjogWwogICAgICAgICAgICAgICAgY29uc3QgU2l6ZWRCb3goCiAgICAgICAgICAgICAgICAgIGhlaWdodDogMjUsCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgQ2VudGVyKAogICAgICAgICAgICAgICAgICBjaGlsZDogRWxldmF0ZWRCdXR0b24oCiAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiAoKSBhc3luYyB7CiAgICAgICAgICAgICAgICAgICAgICBBdE9uYm9hcmRpbmdSZXN1bHQgb25ib2FyZGluZ1Jlc3VsdCA9IGF3YWl0IEF0T25ib2FyZGluZy5vbmJvYXJkKAogICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0OiBjb250ZXh0LAogICAgICAgICAgICAgICAgICAgICAgICBjb25maWc6IEF0T25ib2FyZGluZ0NvbmZpZygKICAgICAgICAgICAgICAgICAgICAgICAgICBhdENsaWVudFByZWZlcmVuY2U6IGF3YWl0IGZ1dHVyZVByZWZlcmVuY2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdEVudmlyb25tZW50OiBBdEVudi5yb290RW52aXJvbm1lbnQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tYWluOiBBdEVudi5yb290RG9tYWluLAogICAgICAgICAgICAgICAgICAgICAgICAgIGFwcEFQSUtleTogQXRFbnYuYXBwQXBpS2V5LAogICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAob25ib2FyZGluZ1Jlc3VsdC5zdGF0dXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBBdE9uYm9hcmRpbmdSZXN1bHRTdGF0dXMuc3VjY2VzczoKICAgICAgICAgICAgICAgICAgICAgICAgICBOYXZpZ2F0b3IucHVzaChjb250ZXh0LCBNYXRlcmlhbFBhZ2VSb3V0ZShidWlsZGVyOiAoXykgPT4gY29uc3QgSG9tZVNjcmVlbigpKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgQXRPbmJvYXJkaW5nUmVzdWx0U3RhdHVzLmVycm9yOgogICAgICAgICAgICAgICAgICAgICAgICAgIFNjYWZmb2xkTWVzc2VuZ2VyLm9mKGNvbnRleHQpLnNob3dTbmFja0JhcigKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IFNuYWNrQmFyKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IENvbG9ycy5yZWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFRleHQoJ0FuIGVycm9yIGhhcyBvY2N1cnJlZCcpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICBjYXNlIEF0T25ib2FyZGluZ1Jlc3VsdFN0YXR1cy5jYW5jZWw6CiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBjaGlsZDogY29uc3QgVGV4dCgnT25ib2FyZCBhbiBAc2lnbicpLAogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIGNvbnN0IFNpemVkQm94KAogICAgICAgICAgICAgICAgICBoZWlnaHQ6IDI1LAogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIENlbnRlcigKICAgICAgICAgICAgICAgICAgICBjaGlsZDogVGV4dEJ1dHRvbigKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IEJ1dHRvblN0eWxlKAogICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogTWF0ZXJpYWxTdGF0ZVByb3BlcnR5LmFsbDxDb2xvcj4oQ29sb3JzLmJsYWNrMTIpLAogICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICBvblByZXNzZWQ6ICgpIGFzeW5jIHsKICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2F0c2lnbnNMaXN0ID0gYXdhaXQgS2V5Y2hhaW5VdGlsLmdldEF0c2lnbkxpc3QoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKFN0cmluZyBhdHNpZ24gaW4gKF9hdHNpZ25zTGlzdCA/PyBbXSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IEtleWNoYWluVXRpbC5yZXNldEF0U2lnbkZyb21LZXljaGFpbihhdHNpZ24pOwogICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgU2NhZmZvbGRNZXNzZW5nZXIub2YoY29udGV4dCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNob3dTbmFja0Jhcihjb25zdCBTbmFja0Jhcihjb250ZW50OiBUZXh0KCdDbGVhcmVkIGFsbCBwYWlyZWQgYXRzaWducycpKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBjb25zdCBUZXh0KCdDbGVhciBwYWlyZWQgYXRzaWducycsIHN0eWxlOiBUZXh0U3R5bGUoY29sb3I6IENvbG9ycy5ibGFjaykpKSksCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgKSwKICAgICAgICAgICkpLAogICAgKTsKICB9Cn0KCmNsYXNzIE5hdlNlcnZpY2UgewogIHN0YXRpYyBHbG9iYWxLZXk8TmF2aWdhdG9yU3RhdGU+IG5hdktleSA9IEdsb2JhbEtleSgpOwp9Cg==",
      "type": "text"
    }
  ],
  "hooks": [],
  "name": "at_location_flutter",
  "description": "A sample of how to use the at_location_flutter package",
  "version": "0.1.0",
  "environment": {"mason": "any"},
  "vars": {}
});
